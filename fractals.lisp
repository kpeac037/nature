(defun feedlike-icon (file)
  (with-canvas (:width 100 :height 100)
    (set-rgb-fill 1.0 0.65 0.3)
    (rounded-rectangle 0 0 100 100 10 10)
    (fill-path)
    (set-rgb-fill 1.0 1.0 1.0)
    (centered-circle-path 20 20 10)
    (fill-path)
    (flet ((quarter-circle (x y radius)
             (move-to (+ x radius) y)
             (arc x y radius 0 (/ pi 2))))
      (set-rgb-stroke 1.0 1.0 1.0)
      (set-line-width 15)
      (quarter-circle 20 20 30)
      (stroke)
      (quarter-circle 20 20 60)
      (stroke))
    (rounded-rectangle 5 5 90 90 7 7)
    (set-gradient-fill 50 90
                       1.0 1.0 1.0 0.7
                       50 20
                       1.0 1.0 1.0 0.0)
    (set-line-width 2)
    (set-rgba-stroke 1.0 1.0 1.0 0.1)
    (fill-and-stroke)
    (save-png file)))

(defun line (file)
  (with-canvas (:width 640 :height 400)
    (set-rgb-fill 1.0 0.65 0.3)
    (move-to 320 0)
    (set-rgb-stroke 0 0 0)
    (set-line-width 5)
    (line-to 320 100)
    (stroke)
    (save-png file)))

(defun circle (file)
  (with-canvas (:width 90 :height 90)
    (translate 45 45)
    (set-rgb-stroke 0 0 0)
    (centered-circle-path 0 0 35)
    (stroke)
    (save-png file)))


(defun fact (n)
  (labels ((fact-acc (current acc)
             (if (<= current 0)
                 acc
                 (fact-acc (1- current) (* current acc)))))
    (fact-acc n 1)))



(defun draw-circles (file &optional (rad-dec 0.75))
  (with-canvas (:width 640 :height 400)
    (labels ((draw-rec-circles (radius)
               (unless (< radius 2)
                 (centered-circle-path 0 0 radius)
                 (stroke)
                 (draw-rec-circles (* radius rad-dec)))))
      (translate 320 200)
      (set-rgb-stroke 0 0 0)
      (draw-rec-circles 640)
      (save-png file))))

(defun cantor-circles (file)
  (with-canvas (:width 800 :height 400)
    (labels ((draw-rec-circles (x y radius)
               (unless (< radius 2)
                 (centered-circle-path x y radius)
                 (stroke)
                 (draw-rec-circles (- x radius) y (/ radius 2))
                 (draw-rec-circles (+ x radius) y (/ radius 2)))))
      (set-rgb-stroke 0 0 0)
      (draw-rec-circles 400 200 200)
      (save-png file))))

(defun cantor-circles-2d (file)
  (with-canvas (:width 800 :height 400)
    (labels ((draw-rec-circles (x y radius)
               (unless (< radius 2)
                 (centered-circle-path x y radius)
                 (stroke)
                 (draw-rec-circles (- x radius) (- y radius) (/ radius 2))
                 (draw-rec-circles (+ x radius) (- y radius) (/ radius 2))
                 (draw-rec-circles (- x radius) (+ y radius) (/ radius 2))
                 (draw-rec-circles (+ x radius) (+ y radius) (/ radius 2)))))
      (set-rgb-stroke 0 0 0)
      (draw-rec-circles 400 200 200)
      (save-png file))))



(defun cantor (file)
  (with-canvas (:width 640 :height 400)
    (set-rgb-fill 1.0 0.65 0.3)
    (move-to 0 395)
    (set-rgb-stroke 0 0 0)
    (set-line-width 5)
    (line-to 640 395)
    (stroke)
    (move-to 0 345)
    (line-to 640 345)
    (stroke)
    (save-png file)))

;; Draw line
;; Divide into 3 chunks
;; Drop by y value of line width
;; Use first and last chunk to draw new set
;; continue until length is too small to matter (< length 2)
(defun cantor (file &optional (y-width 20))
  (with-canvas (:width 640 :height 405)
    (labels ((cantor-line (x y length)
               (unless (< length 2)
                 (move-to x y)
                 (line-to (+ x length) y)
                 (stroke)

                 (let ((length* (/ length 3))
                       (x1 x)
                       (x2 (+ x (* length 2)))
                       (y* (- y (* 2 y-width))))
                   (cantor-line x1 y* length*)
                   (cantor-line x2 y* length*)))))
      (set-rgb-stroke 0 0 0)
      (set-line-width y-width)
      (cantor-line 30 400 580)
      (save-png file))))
               
